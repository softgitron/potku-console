openapi: "3.0.0"
info:
  description: "This is potku-console's cloud module API."
  version: "0.1.0"
  title: "Potku-console cloud module API"
  termsOfService: "https://github.com/softgitron/potku-console/blob/main/LICENSE"
  contact:
    email: "roni.juntunen@student.lut.fi"
  license:
    name: "MIT License"
    url: "https://github.com/softgitron/potku-console/blob/main/LICENSE"
servers:
- url: https://{domain}:{port}/{version}
  variables:
    domain:
      default: example.com
      description: Example server
    port:
      enum:
        - "8443"
        - "443"
      default: "8443"
    version:
      enum:
        - "v1"
      default: "v1"
tags:
- name: "potku-console cloud module API"
  description: "Service cloud API for potku-console."
  externalDocs:
    description: "Project wiki"
    url: "https://github.com/softgitron/potku-console/wiki"
- name: queries
  description: "Endpoints for checking that module is still healhy and queuring cloud provider capabilities."
- name: servers
  description: "Endpoints for configuring new and existing servers."
  
paths:
  /queries/health:
    get:
      tags:
      - queries
      summary: "Check that module is still active. Called by core on a regular interval."
      description: ""
      operationId: "getHealth"
      responses:
        "200":
          description: "Module is still healthy."
          
  /queries/machineTypes:
    get:
      tags:
      - queries
      summary: "Get available machine types."
      description: ""
      operationId: "getMachineTypes"
      responses:
        "200":
          description: "Available machine types."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example:
                    - virtual machines
                    - bare metal machines
        "500":
          $ref: "#/components/responses/500ModuleError"
          
  /queries/operatingSystems:
    get:
      tags:
      - queries
      summary: "Get available operating system names."
      description: ""
      operationId: "getOperatingSystems"
      responses:
        "200":
          description: "Available operating system types."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example:
                    - Arch Linux
                    - "Ubuntu 18.04 LTS"
        "500":
          $ref: "#/components/responses/500ModuleError"
          
  /queries/orientations:
    get:
      tags:
      - queries
      summary: "Get available compute orientation names."
      description: ""
      operationId: "getOrientations"
      responses:
        "200":
          description: "Available compute orientation types."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example:
                    - Compute
                    - Memory
                    - Storage
        "500":
          $ref: "#/components/responses/500ModuleError"
          
  /queries/cpuCores:
    get:
      tags:
      - queries
      summary: "Get cpu amount profiles."
      description: ""
      operationId: "getCpuCores"
      responses:
        "200":
          description: "Available cpu amount profiles."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
                  example:
                    - 0.5
                    - 1.0
                    - 2.5
        "500":
          $ref: "#/components/responses/500ModuleError"
          
  /queries/ramBounds:
    get:
      tags:
      - queries
      summary: "Get minimum and maximum ram available."
      description: ""
      operationId: "getRamBounds"
      responses:
        "200":
          description: "Available minimum and maximum ram."
          content:
            application/json:
              schema:
                type: object
                properties:
                  minimum:
                    type: integer
                    example: 1024
                  maximus:
                    type: integer
                    example: 16384
        "500":
          $ref: "#/components/responses/500ModuleError"
          
  /queries/diskBounds:
    get:
      tags:
      - queries
      summary: "Get minimum and maximum disk available."
      description: ""
      operationId: "getDiskBounds"
      responses:
        "200":
          description: "Available minimum and maximum disk."
          content:
            application/json:
              schema:
                type: object
                properties:
                  minimum:
                    type: integer
                    example: 10
                  maximus:
                    type: integer
                    example: 1000
        "500":
          $ref: "#/components/responses/500ModuleError"
                
  /servers:
    post:
      tags:
      - servers
      summary: "Create new servers and update existing configurations. This endpoint is used only if module does not support partial configuration."
      description: ""
      operationId: "postServers"
      requestBody:
        description: "Mandotary parameters for configuring or reconfiguring servers."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FullConfigurationRequest"
      responses:
        "200":
          description: "New server details."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullConfigurationResponse"
        "500":
          $ref: "#/components/responses/500ModuleError"
          
  /servers/network:
    post:
      tags:
      - servers
      summary: "Create new networks and update existing networks."
      description: ""
      operationId: "postServersNetwork"
      requestBody:
        description: "Mandotary parameters for configuring or reconfiguring networks."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NetworkConfigurationRequest"
      responses:
        "200":
          description: "New network details."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkConfigurationResponse"
        "500":
          $ref: "#/components/responses/500ModuleError"
          
  /servers/firewall:
    post:
      tags:
      - servers
      summary: "Create new firewall configurations and update existing firewall configurations."
      description: ""
      operationId: "postServersFirewall"
      requestBody:
        description: "Mandotary parameters for configuring or reconfiguring firewalls."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FirewallConfigurationRequest"
      responses:
        "200":
          description: "New firewall details."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FirewallConfigurationResponse"
        "500":
          $ref: "#/components/responses/500ModuleError"
          
  /servers/disk:
    post:
      tags:
      - servers
      summary: "Create new disk configurations and update existing disk configurations."
      description: ""
      operationId: "postServersDisk"
      requestBody:
        description: "Mandotary parameters for configuring or reconfiguring disks."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiskConfigurationRequest"
      responses:
        "200":
          description: "New disk details."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiskConfigurationResponse"
        "500":
          $ref: "#/components/responses/500ModuleError"
          
  /servers/machine:
    post:
      tags:
      - servers
      summary: "Create new machine configurations and update existing machine configurations."
      description: ""
      operationId: "postServersMachine"
      requestBody:
        description: "Mandotary parameters for configuring or reconfiguring machines."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MachineConfigurationRequest"
      responses:
        "200":
          description: "New machine details."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MachineConfigurationResponse"
        "500":
          $ref: "#/components/responses/500ModuleError"

components:
  schemas:
    BasicCoreResponse:
      type: object
      properties:
        serviceSpecificConfiguration:
          type: object
      
    FullConfigurationRequest:
      allOf:
      - $ref: "#/components/schemas/CoreConfigurationParametersContainer"
      - type: object
        properties:
          servers:
            type: array
            items:
              allOf:
              - $ref: "#/components/schemas/CoreConfigurationParameters"
              - $ref: "#/components/schemas/FirewallConfigurationParameters"
              - $ref: "#/components/schemas/DiskConfigurationParameters"
              - $ref: "#/components/schemas/Machine"
              
    NetworkConfigurationRequest:
      allOf:
      - $ref: "#/components/schemas/CoreConfigurationParametersContainer"
      - type: object
        properties:
          servers:
            type: array
            items:
              allOf:
              - $ref: "#/components/schemas/CoreConfigurationParameters"
              
    FirewallConfigurationRequest:
      allOf:
      - $ref: "#/components/schemas/CoreConfigurationParametersContainer"
      - type: object
        properties:
          servers:
            type: array
            items:
              allOf:
              - $ref: "#/components/schemas/CoreConfigurationParameters"
              - $ref: "#/components/schemas/FirewallConfigurationParameters"
              
    DiskConfigurationRequest:
      allOf:
      - $ref: "#/components/schemas/CoreConfigurationParametersContainer"
      - type: object
        properties:
          servers:
            type: array
            items:
              allOf:
              - $ref: "#/components/schemas/CoreConfigurationParameters"
              - $ref: "#/components/schemas/Disk"
              
    MachineConfigurationRequest:
      allOf:
      - $ref: "#/components/schemas/CoreConfigurationParametersContainer"
      - type: object
        properties:
          servers:
            type: array
            items:
              allOf:
              - $ref: "#/components/schemas/CoreConfigurationParameters"
              - $ref: "#/components/schemas/Machine"
      
    CoreConfigurationParametersContainer:
      type: object
      properties:
        uninitialized:
          type: boolean
          example: false
        sharedNetwork:
          type: boolean
          example: false
      
    CoreConfigurationParameters:
      allOf:
      - type: object
        properties:
          serverId:
            type: integer
            example: 42
          primaryServer:
            type: boolean
            example: true
          cloudAccountId:
            type: integer
            example: 42
          serverSpecificConfiguration:
            type: object
      - $ref: "#/components/schemas/ServerSpecificIds"
          
    FirewallConfigurationParameters:
      type: object
      properties:
        ports:
          type: array
          items:
            type: integer
            example:
            - 25565
            - 80

    DiskConfigurationParameters:
      type: object
      properties:
        diskSize:
          type: integer
          example: 20
            
    FullConfigurationResponse:
      type: object
      properties:
        servers:
          type: array
          items:
            allOf:
            - $ref: "#/components/schemas/CoreConfigurationResponses"
            - $ref: "#/components/schemas/ServerSpecificIds"
            - $ref: "#/components/schemas/Machine"
            - $ref: "#/components/schemas/NetworkConfigurationResponses"
            - $ref: "#/components/schemas/SshCredentials"
            
    NetworkConfigurationResponse:
      type: object
      properties:
        servers:
          type: array
          items:
            allOf:
            - $ref: "#/components/schemas/CoreConfigurationResponses"
            - $ref: "#/components/schemas/ServerSpecificIds"
            - $ref: "#/components/schemas/NetworkConfigurationResponses"
    
    FirewallConfigurationResponse:
      type: object
      properties:
        servers:
          type: array
          items:
            allOf:
            - $ref: "#/components/schemas/CoreConfigurationResponses"
            - $ref: "#/components/schemas/ServerSpecificIds"
            
    DiskConfigurationResponse:
      type: object
      properties:
        servers:
          type: array
          items:
            allOf:
            - $ref: "#/components/schemas/CoreConfigurationResponses"
            - $ref: "#/components/schemas/ServerSpecificIds"
            - $ref: "#/components/schemas/Disk"
            
    MachineConfigurationResponse:
      type: object
      properties:
        servers:
          type: array
          items:
            allOf:
            - $ref: "#/components/schemas/CoreConfigurationResponses"
            - $ref: "#/components/schemas/ServerSpecificIds"
            - $ref: "#/components/schemas/Machine"
            
    CoreConfigurationResponses:
      allOf:
      - $ref: "#/components/schemas/ServerSpecificIds"
      - type: object
        properties:
          serverSpecificConfiguration:
            type: object
          
    NetworkConfigurationResponses:
      type: object
      properties:
        network:
          type: object
          properties:
            dns:
              type: string
              example: myserver.cloud-provider.com
            ipv4:
              type: string
              format: ipv4
              example: 1.2.3.4
            ipv6:
              type: string
              format: ipv6
              example: "2001:0db8:85a3:0000:0000:8a2e:0370:7334"
              
    Disk:
      type: object
      properties:
        diskSize:
          type: integer
          example: 50
                  
    Machine:
      type: object
      properties:
        machine:
          type: object
          properties:
            "type":
              type: string
              example: virtual machine
            operatingSystem:
              type: string
              example: "Ubuntu 18.04 LTS"
            orientation:
              type: string
              enum:
              - general
              - compute
              - memory
              - storage
            cpus:
              type: number
              example: 4
            ram:
              type: integer
              example: 1500
            disk:
              type: integer
              example: 50
          required:
            - "type"
            - operatingSystem
            - orientation
            - cpus
            - ram
            - disk
                  
    SshCredentials:
      type: object
      properties:
        sshCredentials:
          type: object
          properties:
            username:
              type: string
              example: root
            password:
              type: string
              example: NotPenetrablePassword
            privateKey:
              type: string

    ServerSpecificIds:
      type: object
      properties:
        serverSpecificIds:
          type: object
          properties:
            networkId:
              type: string
            publicIpv4Id:
              type: string
            publicIpv6Id:
              type: string
            firewallId:
              type: string
            diskId:
              type: string
            machineId:
              type: string
      
    Error:
      type: object
      properties:
        title:
          type: string
        code:
          type: integer
        description:
          type: string

  parameters:
    TriggerPort:
      in: path
      name: triggerPort
      description: "Port of the trigger."
      schema:
        type: integer
      required: true

  responses:
    200BasicCoreResponse:
      description: "Standard response to the core."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BasicCoreResponse"
            
    500ModuleError:
      description: "Something has gone wrong while processing request."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
